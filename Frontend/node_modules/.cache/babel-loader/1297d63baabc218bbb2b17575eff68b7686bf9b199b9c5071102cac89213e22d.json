{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"cart\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Shopping Cart\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [$options.cart.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.cart, item => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.prodID\n    }, _toDisplayString(item.prodName) + \" - R\" + _toDisplayString(item.price), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"p\", null, \"Total: R\" + _toDisplayString($options.total), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","$options","cart","length","_hoisted_1","_hoisted_2","_Fragment","_renderList","item","key","prodID","prodName","_toDisplayString","price","total"],"sources":["C:\\Users\\Student\\Documents\\Capstone_workshop\\CapstoneEOMP\\Frontend\\src\\views\\CheckoutView.vue"],"sourcesContent":["\r\n    <template>\r\n      <div>\r\n        <div v-if=\"cart.length > 0\" class=\"cart\">\r\n          <h2>Shopping Cart</h2>\r\n          <ul>\r\n            <li v-for=\"item in cart\" :key=\"item.prodID\">\r\n              {{ item.prodName }} - R{{ item.price }}\r\n            </li>\r\n          </ul>\r\n          <p>Total: R{{ total }}</p>\r\n        </div>\r\n      </div>\r\n      </template>\r\n      \r\n      \r\n    <script>\r\n      export default {\r\n        computed: {\r\n  cart() {\r\n    return this.$store.state.addToCart; // Replace 'cart' with your actual cart state property name\r\n  },\r\n  total() {\r\n    // Calculate the total amount based on the items in the cart\r\n    return this.cart.reduce((total, item) => total + item.price, 0);\r\n  },\r\n},\r\n\r\n      };\r\n\r\n\r\n  </script>"],"mappings":";;;EAGoCA,KAAK,EAAC;;gCAChCC,mBAAA,CAAsB,YAAlB,eAAa;;;uBAFrBC,mBAAA,CAUM,cATOC,QAAA,CAAAC,IAAI,CAACC,MAAM,Q,cAAtBH,mBAAA,CAQM,OARNI,UAQM,GAPJC,UAAsB,EACtBN,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKM,SAAA,QAAAC,WAAA,CAFcN,QAAA,CAAAC,IAAI,EAAZM,IAAI;yBAAfR,mBAAA,CAEK;MAFqBS,GAAG,EAAED,IAAI,CAACE;wBAC/BF,IAAI,CAACG,QAAQ,IAAG,MAAI,GAAAC,gBAAA,CAAGJ,IAAI,CAACK,KAAK;oCAGxCd,mBAAA,CAA0B,WAAvB,UAAQ,GAAAa,gBAAA,CAAGX,QAAA,CAAAa,KAAK,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}