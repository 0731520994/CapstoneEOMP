{"ast":null,"code":"import { createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _createCommentVNode(\" ... (your template code) ... \");\n}","map":{"version":3,"names":["_createCommentVNode"],"sources":["C:\\Users\\cash\\Documents\\Capstone_workshop\\CapstoneEOMP\\Frontend\\src\\views\\AddProductView.vue"],"sourcesContent":["<template>\r\n  <!-- ... (your template code) ... -->\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      prodID: \"\",\r\n      prodName: \"\",\r\n      categoryID: \"\",\r\n      price: \"\",\r\n      prodUrl: \"\",\r\n      err: [], // Initialize an error array\r\n    };\r\n  },\r\n  methods: {\r\n    async addProduct() {\r\n      // Validate the fields\r\n      if (!this.prodName || !this.categoryID || !this.price || !this.prodUrl) {\r\n        this.err = [\"Please fill in all fields\"];\r\n        return; // Stop execution if there are validation errors\r\n      }\r\n\r\n      try {\r\n        const payload = {\r\n          prodID: this.prodID,\r\n          prodName: this.prodName,\r\n          categoryID: this.categoryID,\r\n          price: this.price,\r\n          prodUrl: this.prodUrl,\r\n        };\r\n\r\n        const response = await axios.post(\"https://capstoneconnection.onrender.com/AddNewProduct\", payload);\r\n\r\n        // Check if the response contains data property\r\n        if (response.data) {\r\n          // Clear the form and error messages\r\n          this.prodID = \"\";\r\n          this.prodName = \"\";\r\n          this.categoryID = \"\";\r\n          this.price = \"\";\r\n          this.prodUrl = \"\";\r\n          this.err = [];\r\n\r\n          this.$router.push(\"/admin\");\r\n          alert(\"Product added successfully\");\r\n        } else {\r\n          // Handle the case where the response does not contain data\r\n          this.err = [\"An error occurred\"];\r\n        }\r\n      } catch (err) {\r\n        // Handle any errors that occur during the request\r\n        this.err = [err.response?.data?.msg || \"An error occurred\"];\r\n        console.error(err);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;SACEA,mBAAA,kCAAqC"},"metadata":{},"sourceType":"module","externalDependencies":[]}