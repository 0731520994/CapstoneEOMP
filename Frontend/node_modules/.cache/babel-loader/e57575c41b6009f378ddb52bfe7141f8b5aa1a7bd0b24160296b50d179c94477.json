{"ast":null,"code":"// import { createStore } from 'vuex';\n// import axios from 'axios';\n// import sweet from 'sweetalert';\n// import { useCookies } from 'vue3-cookies';\n// import router from '@/router';\n\n// const capstoneeompUrl = \"https://capstoneconnection.onrender.com\";\n// const { cookies } = useCookies();\n\n// export default createStore({\n//   state: {\n//     users: null,\n//     user: null,\n//     products: [],\n//     product: null,\n//     adminData: [],\n//     newProduct: {\n//       prodID: '',\n//       prodName: '',\n//       categoryID: '',\n//       price: '',\n//       prodUrl: '',\n//     orders: null,\n//     order: null,\n//     categories: null,\n//     cart: storedCart,\n//     removeFromCart: null,\n//     ViewItem: null,\n//     category: null,\n//     spinner: false,\n//     token: null,\n//     msg: null,\n//     accessories: null,\n//     perfumes: null,\n//     beauty: null,\n//     state: {\n//       product: {\n//         prodUrl: '',\n//       },\n//     },\n//   },\n\n// },\n//   getters: {\n\n//   },\n//   mutations: {\n//     setUsers(state, users) {\n//       state.users = users;\n//     },\n//     setUser(state, user) {\n//       state.user = user;\n//     },\n//     setProducts(state, products) {\n//       state.products = products;\n//     },\n//     setProduct(state, product) {\n//       state.product = product;\n//     },\n//     setOrders(state, orders) {\n//       state.orders = orders;\n//     },\n//     setOrder(state, order) {\n//       state.order = order;\n//     },\n//     setCategories(state, categories) {\n//       state.categories = categories;\n//     },\n//     setCategory(state, category) {\n//       state.category = category;\n//     },\n//     setSpinner(state, value) {\n//       state.spinner = value;\n//     },\n//     setToken(state, token) {\n//       state.token = token; // Fixed the typo here\n//     },\n//     setMsg(state, msg) {\n//       state.msg = msg;\n//     },\n//     setViewItem(state, ViewItem) {\n//       state.ViewItem = ViewItem;\n//     },\n//     setDeleteProduct(state, data) {\n//       state.products = data;\n//     },\n//     setDeleteUser(state, data) {\n//       state.users = data;\n//     },\n\n//     addToCart(state, product) {\n//        state.cart.push(product)\n//     },\n//     removeFromCart(state, productIndex) {\n//       state.cart.splice(productIndex, 1);\n//     },\n\n//     addProduct(state, newProduct) {\n//       state.products.push(newProduct);\n//     },\n//     setPerfumes(state, perfumes) {\n//       state.perfumes = perfumes;\n//     },\n//     setAccessories(state, accessories) {\n//       state.accessories = accessories;\n//     },\n//     setBeauty(state, beauty) {\n//       state.beauty= beauty;\n//     },\n\n//   },\n\n//   actions: {\n\n//     async register(context, payload) {\n//       try {\n//         const { msg } = (await axios.post(`${capstoneeompUrl}user`, payload)).data\n//           if (msg) {\n//             sweet({\n//               title: \"Registration\",\n//               text: msg,\n//               icon: \"success\",\n//               timer: 2000,\n//             });\n\n//             context.dispatch(\"fetchUsers\"); \n//             router.push({ name: \"login\" });\n//           } else {\n//             sweet({\n//               title: \"Error\",\n//               text: msg,\n//               icon: \"error\",\n//               timer: 2000,\n//             });\n//           }\n//         } catch (e) {\n//           context.commit(\"setMsg\", \"An error has occured, please try again\");\n//         }\n//   },\n\n// async login(context, payload) {\n//   try {\n//     const { msg, token, result } = (await axios.post(`${capstoneeompUrl}login`, payload)).data\n//     if(result) {\n//       context.commit(\"setUser\", {result, msg});\n//       localStorage.setItem(\"user\", JSON.stringify(result))\n//       cookies.set(\"LegitUser\", {token, msg, result})\n//       AuthenticateUser.applyToken(token)\n//       sweet({\n//         title: msg,\n//         text: `Welcome back ${result?.firstName}`,\n//         icon: \"success\",\n//         timer: 2000\n//       })\n//       router.push({name: 'home'})\n//     } else {\n//       sweet({\n//         title: \"Error\",\n//         text: msg,\n//         icon: \"error\",\n//         timer: 2000\n//       })\n//     }\n//   } catch (e) {\n//     context.commit(\"setMsg\", \"An error has occurred\")\n//   }\n// },\n\n//     async fetchUsers(context) {\n//       try {\n//         const { data } = await axios.get(`${capstoneeompUrl}/users`);\n//         context.commit('setUsers', data.results);\n//       } catch (e) {\n//         context.commit('setMsg', 'Error occurred while fetching users');\n//       }\n//     },\n\n//     async updateUser(context, updatedUser) {\n//       try {\n//         const response = await axios.patch(\n//           `${cUrl}users/${updatedUser.userID}`,\n//           updatedUser\n//         );\n//         return response.data;\n//       } catch (error) {\n//         throw error;\n//       }\n//     },\n//     async getUser(context) {\n//       try {\n//         const response = await axios.get(`${cUrl}users`);\n//         context.commit('setUsers', response.data.results);\n//         context.commit('setSpinner', false);\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     },\n\n//     async pushDataToAdmin({ commit }, userData) {\n//       commit('addUserToAdmin', userData);\n//     },\n\n//     async fetchProducts(context) {\n//       try {\n//         const { data } = await axios.get(`${capstoneeompUrl}/products`); \n//         context.commit('setProducts', data.results);\n//       } catch (err) {\n//         console.log(err);\n//         context.commit('setMsg', 'error occurred');\n//       }\n//     },\n\n//     async fetchProduct(context, id) {\n//       try {\n//         const response = await axios.get(`${cUrl}product/${id}`);\n//         const { results, err } = response.data;\n//         if (results) {\n//           context.commit('setProduct', results[0]);\n//         } else {\n//           context.commit('setMsg', err);\n//         }\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     },\n\n//     async addProduct(context, payload) {\n//       try {\n//         const response = await axios.post(`${capstoneeompUrl}/AddNewProduct`, payload);\n\n//         context.commit('addProduct', payload);\n//         const { msg, err } = response.data;\n\n//         if (msg) {\n//           context.commit('setMsg', msg);\n//         } else if (err) {\n//           console.log(err);\n//           context.commit('setMsg', err);\n//         }\n\n//         await context.dispatch('fetchProducts');\n//       } catch (error) {\n//         console.error(error);\n//         context.commit('setMsg', 'Error adding product');\n//         throw error;\n//       }\n//     },\n\n//     async updateProduct(context, updatedProduct) {\n//       try {\n\n//         const response = await axios.patch(`${capstoneeompUrl}/products/${updatedProduct.productID}`, updatedProduct);\n\n//         if (response.status === 200) {\n//           context.commit('setMsg', 'Product updated successfully');\n//         } else {\n//           context.commit('setMsg', 'Product update failed');\n//         }\n\n//         return response.data; \n//       } catch (error) {\n//         console.error(error);\n//         context.commit('setMsg', 'An error occurred while updating the product');\n//         throw error; \n//       }\n//     },\n\n//     async fetchProductsByCategory(context, categoryName) {\n//       try {\n//         const { data } = await axios.get(`${capstoneeompUrl}/products/category/${categoryName}`);\n//         context.commit('setProducts', data.results);\n//       } catch (err) {\n//         console.log(err);\n//         context.commit('setMsg', 'Error occurred while fetching products by category');\n//       }\n//     },\n\n//     async addToCartAction(context, product) {\n//       context.commit('addToCart', product);\n//       localStorage.setItem('cart', JSON.stringify(context.state.cart));\n//     },\n//     async removeFromCartAction(context, productIndex) {\n//       context.commit('removeFromCart', productIndex);\n//     },\n\n//     async fetchAccessories(context) {\n//       try{\n//         const {data} = await axios.get(`${capstoneeompUrl}accessories`)\n//         context.commit(\"setAccessories\", data.results)\n//       }catch(e){\n//         console.log(e)\n//       }\n//     },\n\n//     async fetchBeauty(context) {\n//       try{\n//         const {data} = await axios.get(`${capstoneeompUrl}beauty`)\n//         context.commit(\"setBeauty\", data.results)\n//       }catch(e){\n//         console.log(e)\n//       }\n//     },\n\n//     async fetchPerfumes(context) {\n//       try{\n//         const {data} = await axios.get(`${capstoneeompUrl}perfumes`)\n//         context.commit(\"setPerfumes\", data.results)\n//       }catch(e){\n//         console.log(e)\n//       }\n//     },\n\n//   },\n\n//   modules: {\n\n//   },\n// },\n\n// );","map":{"version":3,"names":[],"sources":["C:/Users/Student/Documents/Capstone_workshop/CapstoneEOMP/Frontend/src/store/index.js"],"sourcesContent":["// import { createStore } from 'vuex';\r\n// import axios from 'axios';\r\n// import sweet from 'sweetalert';\r\n// import { useCookies } from 'vue3-cookies';\r\n// import router from '@/router';\r\n\r\n// const capstoneeompUrl = \"https://capstoneconnection.onrender.com\";\r\n// const { cookies } = useCookies();\r\n\r\n// export default createStore({\r\n//   state: {\r\n//     users: null,\r\n//     user: null,\r\n//     products: [],\r\n//     product: null,\r\n//     adminData: [],\r\n//     newProduct: {\r\n//       prodID: '',\r\n//       prodName: '',\r\n//       categoryID: '',\r\n//       price: '',\r\n//       prodUrl: '',\r\n//     orders: null,\r\n//     order: null,\r\n//     categories: null,\r\n//     cart: storedCart,\r\n//     removeFromCart: null,\r\n//     ViewItem: null,\r\n//     category: null,\r\n//     spinner: false,\r\n//     token: null,\r\n//     msg: null,\r\n//     accessories: null,\r\n//     perfumes: null,\r\n//     beauty: null,\r\n//     state: {\r\n//       product: {\r\n//         prodUrl: '',\r\n//       },\r\n//     },\r\n//   },\r\n\r\n// },\r\n//   getters: {\r\n\r\n//   },\r\n//   mutations: {\r\n//     setUsers(state, users) {\r\n//       state.users = users;\r\n//     },\r\n//     setUser(state, user) {\r\n//       state.user = user;\r\n//     },\r\n//     setProducts(state, products) {\r\n//       state.products = products;\r\n//     },\r\n//     setProduct(state, product) {\r\n//       state.product = product;\r\n//     },\r\n//     setOrders(state, orders) {\r\n//       state.orders = orders;\r\n//     },\r\n//     setOrder(state, order) {\r\n//       state.order = order;\r\n//     },\r\n//     setCategories(state, categories) {\r\n//       state.categories = categories;\r\n//     },\r\n//     setCategory(state, category) {\r\n//       state.category = category;\r\n//     },\r\n//     setSpinner(state, value) {\r\n//       state.spinner = value;\r\n//     },\r\n//     setToken(state, token) {\r\n//       state.token = token; // Fixed the typo here\r\n//     },\r\n//     setMsg(state, msg) {\r\n//       state.msg = msg;\r\n//     },\r\n//     setViewItem(state, ViewItem) {\r\n//       state.ViewItem = ViewItem;\r\n//     },\r\n//     setDeleteProduct(state, data) {\r\n//       state.products = data;\r\n//     },\r\n//     setDeleteUser(state, data) {\r\n//       state.users = data;\r\n//     },\r\n\r\n//     addToCart(state, product) {\r\n//        state.cart.push(product)\r\n//     },\r\n//     removeFromCart(state, productIndex) {\r\n//       state.cart.splice(productIndex, 1);\r\n//     },\r\n\r\n//     addProduct(state, newProduct) {\r\n//       state.products.push(newProduct);\r\n//     },\r\n//     setPerfumes(state, perfumes) {\r\n//       state.perfumes = perfumes;\r\n//     },\r\n//     setAccessories(state, accessories) {\r\n//       state.accessories = accessories;\r\n//     },\r\n//     setBeauty(state, beauty) {\r\n//       state.beauty= beauty;\r\n//     },\r\n  \r\n//   },\r\n \r\n//   actions: {\r\n\r\n    \r\n//     async register(context, payload) {\r\n//       try {\r\n//         const { msg } = (await axios.post(`${capstoneeompUrl}user`, payload)).data\r\n//           if (msg) {\r\n//             sweet({\r\n//               title: \"Registration\",\r\n//               text: msg,\r\n//               icon: \"success\",\r\n//               timer: 2000,\r\n//             });\r\n\r\n//             context.dispatch(\"fetchUsers\"); \r\n//             router.push({ name: \"login\" });\r\n//           } else {\r\n//             sweet({\r\n//               title: \"Error\",\r\n//               text: msg,\r\n//               icon: \"error\",\r\n//               timer: 2000,\r\n//             });\r\n//           }\r\n//         } catch (e) {\r\n//           context.commit(\"setMsg\", \"An error has occured, please try again\");\r\n//         }\r\n//   },\r\n\r\n\r\n// async login(context, payload) {\r\n//   try {\r\n//     const { msg, token, result } = (await axios.post(`${capstoneeompUrl}login`, payload)).data\r\n//     if(result) {\r\n//       context.commit(\"setUser\", {result, msg});\r\n//       localStorage.setItem(\"user\", JSON.stringify(result))\r\n//       cookies.set(\"LegitUser\", {token, msg, result})\r\n//       AuthenticateUser.applyToken(token)\r\n//       sweet({\r\n//         title: msg,\r\n//         text: `Welcome back ${result?.firstName}`,\r\n//         icon: \"success\",\r\n//         timer: 2000\r\n//       })\r\n//       router.push({name: 'home'})\r\n//     } else {\r\n//       sweet({\r\n//         title: \"Error\",\r\n//         text: msg,\r\n//         icon: \"error\",\r\n//         timer: 2000\r\n//       })\r\n//     }\r\n//   } catch (e) {\r\n//     context.commit(\"setMsg\", \"An error has occurred\")\r\n//   }\r\n// },\r\n\r\n\r\n\r\n//     async fetchUsers(context) {\r\n//       try {\r\n//         const { data } = await axios.get(`${capstoneeompUrl}/users`);\r\n//         context.commit('setUsers', data.results);\r\n//       } catch (e) {\r\n//         context.commit('setMsg', 'Error occurred while fetching users');\r\n//       }\r\n//     },\r\n\r\n\r\n//     async updateUser(context, updatedUser) {\r\n//       try {\r\n//         const response = await axios.patch(\r\n//           `${cUrl}users/${updatedUser.userID}`,\r\n//           updatedUser\r\n//         );\r\n//         return response.data;\r\n//       } catch (error) {\r\n//         throw error;\r\n//       }\r\n//     },\r\n//     async getUser(context) {\r\n//       try {\r\n//         const response = await axios.get(`${cUrl}users`);\r\n//         context.commit('setUsers', response.data.results);\r\n//         context.commit('setSpinner', false);\r\n//       } catch (err) {\r\n//         console.log(err);\r\n//       }\r\n//     },\r\n\r\n\r\n//     async pushDataToAdmin({ commit }, userData) {\r\n//       commit('addUserToAdmin', userData);\r\n//     },\r\n  \r\n   \r\n//     async fetchProducts(context) {\r\n//       try {\r\n//         const { data } = await axios.get(`${capstoneeompUrl}/products`); \r\n//         context.commit('setProducts', data.results);\r\n//       } catch (err) {\r\n//         console.log(err);\r\n//         context.commit('setMsg', 'error occurred');\r\n//       }\r\n//     },\r\n    \r\n\r\n//     async fetchProduct(context, id) {\r\n//       try {\r\n//         const response = await axios.get(`${cUrl}product/${id}`);\r\n//         const { results, err } = response.data;\r\n//         if (results) {\r\n//           context.commit('setProduct', results[0]);\r\n//         } else {\r\n//           context.commit('setMsg', err);\r\n//         }\r\n//       } catch (err) {\r\n//         console.log(err);\r\n//       }\r\n//     },\r\n\r\n//     async addProduct(context, payload) {\r\n//       try {\r\n//         const response = await axios.post(`${capstoneeompUrl}/AddNewProduct`, payload);\r\n\r\n//         context.commit('addProduct', payload);\r\n//         const { msg, err } = response.data;\r\n    \r\n//         if (msg) {\r\n//           context.commit('setMsg', msg);\r\n//         } else if (err) {\r\n//           console.log(err);\r\n//           context.commit('setMsg', err);\r\n//         }\r\n    \r\n//         await context.dispatch('fetchProducts');\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//         context.commit('setMsg', 'Error adding product');\r\n//         throw error;\r\n//       }\r\n//     },\r\n\r\n//     async updateProduct(context, updatedProduct) {\r\n//       try {\r\n       \r\n//         const response = await axios.patch(`${capstoneeompUrl}/products/${updatedProduct.productID}`, updatedProduct);\r\n    \r\n    \r\n//         if (response.status === 200) {\r\n//           context.commit('setMsg', 'Product updated successfully');\r\n//         } else {\r\n//           context.commit('setMsg', 'Product update failed');\r\n//         }\r\n    \r\n//         return response.data; \r\n//       } catch (error) {\r\n//         console.error(error);\r\n//         context.commit('setMsg', 'An error occurred while updating the product');\r\n//         throw error; \r\n//       }\r\n//     },\r\n    \r\n\r\n//     async fetchProductsByCategory(context, categoryName) {\r\n//       try {\r\n//         const { data } = await axios.get(`${capstoneeompUrl}/products/category/${categoryName}`);\r\n//         context.commit('setProducts', data.results);\r\n//       } catch (err) {\r\n//         console.log(err);\r\n//         context.commit('setMsg', 'Error occurred while fetching products by category');\r\n//       }\r\n//     },\r\n    \r\n//     async addToCartAction(context, product) {\r\n//       context.commit('addToCart', product);\r\n//       localStorage.setItem('cart', JSON.stringify(context.state.cart));\r\n//     },\r\n//     async removeFromCartAction(context, productIndex) {\r\n//       context.commit('removeFromCart', productIndex);\r\n//     },\r\n\r\n\r\n//     async fetchAccessories(context) {\r\n//       try{\r\n//         const {data} = await axios.get(`${capstoneeompUrl}accessories`)\r\n//         context.commit(\"setAccessories\", data.results)\r\n//       }catch(e){\r\n//         console.log(e)\r\n//       }\r\n//     },\r\n\r\n//     async fetchBeauty(context) {\r\n//       try{\r\n//         const {data} = await axios.get(`${capstoneeompUrl}beauty`)\r\n//         context.commit(\"setBeauty\", data.results)\r\n//       }catch(e){\r\n//         console.log(e)\r\n//       }\r\n//     },\r\n\r\n//     async fetchPerfumes(context) {\r\n//       try{\r\n//         const {data} = await axios.get(`${capstoneeompUrl}perfumes`)\r\n//         context.commit(\"setPerfumes\", data.results)\r\n//       }catch(e){\r\n//         console.log(e)\r\n//       }\r\n//     },\r\n\r\n//   },\r\n\r\n//   modules: {\r\n\r\n//   },\r\n// },\r\n\r\n\r\n// );\r\n"],"mappings},"metadata":{},"sourceType":"script","externalDependencies":[]}